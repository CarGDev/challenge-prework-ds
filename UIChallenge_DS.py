# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UIChallenge_DS.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
import numpy as np
import scipy
import scipy.stats
import plotly.graph_objects as go
from matplotlib import pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
import tablesInformation
import plotInfo

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(806, 559)
        Dialog.setStyleSheet("background-color: rgb(70, 199, 231);\n"
"background-color: rgb(17, 17, 67);\n"
"")
        Dialog.setModal(False)
        self.cbSelection = QtWidgets.QComboBox(Dialog)
        self.cbSelection.setGeometry(QtCore.QRect(30, 50, 301, 22))
        self.cbSelection.setStyleSheet("color: rgb(11, 11, 42);\n"
"background-color: rgb(219, 219, 231);")
        self.cbSelection.setObjectName("cbSelection")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.cbSelection.addItem("")
        self.lblTitle = QtWidgets.QLabel(Dialog)
        self.lblTitle.setGeometry(QtCore.QRect(30, 20, 161, 31))
        self.lblTitle.setStyleSheet("color: rgb(255, 242, 252);")
        self.lblTitle.setObjectName("lblTitle")
        self.btnExit = QtWidgets.QPushButton(Dialog)
        self.btnExit.setGeometry(QtCore.QRect(680, 20, 101, 23))
        self.btnExit.setStyleSheet("color: rgb(11, 11, 42);\n"
"background-color: rgb(181, 227, 67);")
        self.btnExit.setObjectName("btnExit")
        self.tblViewer = QtWidgets.QTableWidget(Dialog)
        self.tblViewer.setGeometry(QtCore.QRect(30, 110, 751, 431))
        self.tblViewer.setStyleSheet("color: rgb(11, 11, 42);\n"
"background-color: rgb(219, 219, 231);")
        self.tblViewer.setObjectName("tblViewer")
        self.tblViewer.setColumnCount(0)
        self.tblViewer.setRowCount(0)
        self.btnPlot = QtWidgets.QPushButton(Dialog)
        self.btnPlot.setGeometry(QtCore.QRect(680, 50, 101, 23))
        self.btnPlot.setStyleSheet("color: rgb(11, 11, 42);\n"
"background-color: rgb(181, 227, 67);")
        self.btnPlot.setObjectName("btnPlot")
        self.btnSelect = QtWidgets.QPushButton(Dialog)
        self.btnSelect.setGeometry(QtCore.QRect(360, 50, 101, 23))
        self.btnSelect.setStyleSheet("color: rgb(11, 11, 42);\n"
"background-color: rgb(181, 227, 67);")
        self.btnSelect.setObjectName("btnSelect")

        self.retranslateUi(Dialog)
        # text = self.cbSelection.changeEvent()
        self.btnSelect.clicked.connect(self.addItemsToLayout)
        self.btnExit.clicked.connect(self.exitNow)
        self.btnPlot.clicked.connect(self.plotItem)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def exitNow(self):
        exit()


    def addItemsToLayout (self):

        def settingDataTable(tableToSet, dataRows, totalColumns):
            print('start!')
            self.tblViewer.setColumnCount(0)
            self.tblViewer.setRowCount(0)
            self.tblViewer.setRowCount(len(tableToSet))
            self.tblViewer.setColumnCount(totalColumns)
            self.tblViewer.setHorizontalHeaderLabels(dataRows)
            for i in range (0, totalColumns):
                name = dataRows[i]
                for j in range(0, len(tableToSet)):
                    value = tableToSet[name].iloc[j]
                    value = str(value)
                    self.tblViewer.setItem(j, i,  QtWidgets.QTableWidgetItem(value))

        text = self.cbSelection.currentText()
        if text == 'All items':
            print(1)
            tableToSet = tablesInformation.dfTable()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Estructure data':
            print(2)
            tableToSet = tablesInformation.tblDataFrame()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per state per month':
            print(3)
            tableToSet = tablesInformation.total_state_by_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per state per year':
            print(4)
            tableToSet = tablesInformation.total_state_by_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per kind of visitor':
            print(5)
            tableToSet = tablesInformation.total_state_by_kind_visitor().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per kind of visitor and time (month)':
            print(6)
            tableToSet = tablesInformation.total_state_by_kind_visitor_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per kind of visitor and time (year)':
            print(7)
            tableToSet = tablesInformation.total_state_by_kind_visitor_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per kind of work type and time (month)':
            print(8)
            tableToSet = tablesInformation.total_state_by_kind_work_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per kind of work type and time (year)':
            print(9)
            tableToSet = tablesInformation.total_state_by_kind_work_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Total per kind of work type and kind of visitor':
            print(10)
            tableToSet = tablesInformation.total_state_by_kind_work_visitor_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Average per state (month)':
            print(11)
            tableToSet = tablesInformation.average_state_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Average per state (year)':
            print(12)
            tableToSet = tablesInformation.average_state_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Average per state and kind of visitors (month)':
            print(13)
            tableToSet = tablesInformation.average_state_visitors_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Average per state and kind of visitors(year)':
            print(14)
            tableToSet = tablesInformation.average_state_visitors_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Percentage per kind of visitor by month per state':
            print(15)
            tableToSet = tablesInformation.percentage_visitors().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Percentage per kind of work type and time (month)':
            print(16)
            tableToSet = tablesInformation.percentage_visitors_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Percentage per kind of work type and time (year)':
            print(17)
            tableToSet = tablesInformation.percentage_visitors_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Percentage per state per month':
            print(18)
            tableToSet = tablesInformation.percentage_visitors_work_month().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')
        elif text == 'Percentage per state per year':
            print(19)
            tableToSet = tablesInformation.percentage_visitors_work_year().reset_index()
            dataRows = tableToSet.columns.values
            totalColumns = len(dataRows)
            settingDataTable(tableToSet,dataRows,totalColumns)
            print('Done!')

    def plotItem (self):
        text = self.cbSelection.currentText()
        if text == 'Total per state per month':
            plotInfo.plotInfo(tablesInformation.total_state_by_month(),text)
        elif text == 'Total per state per year':
            plotInfo.plotInfo(tablesInformation.total_state_by_year(),text)
        elif text == 'Total per kind of visitor':
            plotInfo.plotInfo(tablesInformation.total_state_by_kind_visitor(),text)
        elif text == 'Total per kind of visitor and time (month)':
            plotInfo.plotInfo(tablesInformation.total_state_by_kind_visitor_month(),text)
        elif text == 'Total per kind of visitor and time (year)':
            plotInfo.plotInfo(tablesInformation.total_state_by_kind_visitor_year(),text)
        elif text == 'Total per kind of work type and time (month)':
            plotInfo.plotInfo(tablesInformation.total_state_by_kind_work_month(),text)
        elif text == 'Total per kind of work type and time (year)':
            plotInfo.plotInfo(tablesInformation.total_state_by_kind_work_year(),text)
        elif text == 'Total per kind of work type and kind of visitor':
            plotInfo.plotInfo(tablesInformation.total_state_by_kind_work_visitor_year(),text)
        elif text == 'Average per state (month)':
            plotInfo.plotInfo(tablesInformation.average_state_month(),text)
        elif text == 'Average per state (year)':
            plotInfo.plotInfo(tablesInformation.average_state_year(),text)
        elif text == 'Average per state and kind of visitors (month)':
            plotInfo.plotInfo(tablesInformation.average_state_visitors_month(),text)
        elif text == 'Average per state and kind of visitors(year)':
            plotInfo.plotInfo(tablesInformation.average_state_visitors_year(),text)
        elif text == 'Percentage per kind of visitor by month per state':
            plotInfo.plotInfo(tablesInformation.percentage_visitors(),text)
        elif text == 'Percentage per kind of work type and time (month)':
            plotInfo.plotInfo(tablesInformation.percentage_visitors_month(),text)
        elif text == 'Percentage per kind of work type and time (year)':
            plotInfo.plotInfo(tablesInformation.percentage_visitors_year(),text)
        elif text == 'Percentage per state per month':
            plotInfo.plotInfo(tablesInformation.percentage_visitors_work_month(),text)
        elif text == 'Percentage per state per year':
            plotInfo.plotInfo(tablesInformation.percentage_visitors_work_year(),text)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.cbSelection.setItemText(0, _translate("Dialog", "All items"))
        self.cbSelection.setItemText(1, _translate("Dialog", "Estructure data"))
        self.cbSelection.setItemText(2, _translate("Dialog", "Total per state per month"))
        self.cbSelection.setItemText(3, _translate("Dialog", "Total per state per year"))
        self.cbSelection.setItemText(4, _translate("Dialog", "Total per kind of visitor"))
        self.cbSelection.setItemText(5, _translate("Dialog", "Total per kind of visitor and time (month)"))
        self.cbSelection.setItemText(6, _translate("Dialog", "Total per kind of visitor and time (year)"))
        self.cbSelection.setItemText(7, _translate("Dialog", "Total per kind of work type and time (month)"))
        self.cbSelection.setItemText(8, _translate("Dialog", "Total per kind of work type and time (year)"))
        self.cbSelection.setItemText(9, _translate("Dialog", "Total per kind of work type and kind of visitor"))
        self.cbSelection.setItemText(10, _translate("Dialog", "Average per state (month)"))
        self.cbSelection.setItemText(11, _translate("Dialog", "Average per state (year)"))
        self.cbSelection.setItemText(12, _translate("Dialog", "Average per state and kind of visitors (month)"))
        self.cbSelection.setItemText(13, _translate("Dialog", "Average per state and kind of visitors(year)"))
        self.cbSelection.setItemText(14, _translate("Dialog", "Percentage per kind of visitor by month per state"))
        self.cbSelection.setItemText(15, _translate("Dialog", "Percentage per kind of work type and time (month)"))
        self.cbSelection.setItemText(16, _translate("Dialog", "Percentage per kind of work type and time (year)"))
        self.cbSelection.setItemText(17, _translate("Dialog", "Percentage per state per month"))
        self.cbSelection.setItemText(18, _translate("Dialog", "Percentage per state per year"))
        self.lblTitle.setText(_translate("Dialog", "Tables"))
        self.btnExit.setText(_translate("Dialog", "Exit"))
        self.btnPlot.setText(_translate("Dialog", "Plot"))
        self.btnSelect.setText(_translate("Dialog", "Select"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
